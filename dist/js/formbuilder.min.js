$(document).ready(function(){function a(){for(var a=difflib.stringAsLines("<form>\n<element><name>A</name></element>\n</form>"),b=difflib.stringAsLines("<form>\n<element><name>A</name></element>\n<element><name>b</name></eloement>\n</form>"),c=new difflib.SequenceMatcher(a,b),d=c.get_opcodes(),e=$(".dropArea");e.firstChild;)e.removeChild(e.firstChild);var f=$("contextSize").value;f=f?f:null,e.append(diffview.buildView({baseTextLines:a,newTextLines:b,opcodes:d,baseTextName:"Base Text",newTextName:"New Text",contextSize:f,viewType:$("inline").checked?1:0}))}formBuilder.init(),$("#export").click(function(){formBuilder.formView.downloadXML()}),$("#import").click(function(){formBuilder.formView.importXML()}),$("#clear").click(function(){formBuilder.clear()}),$("#run").click(function(){gremlins.createHorde().gremlin(gremlins.species.formFiller()).gremlin(gremlins.species.clicker().clickTypes(["click"])).gremlin(gremlins.species.scroller()).gremlin(function(){$(".fields").each(function(a,b){$(b).dblclick()});var a=$(".fa-trash-o");$(a[Math.floor(Math.random()*a.length)]).click(),a=$(".fa-wrench"),$(a[Math.floor(Math.random()*a.length)]).click()}).unleash()}),$("#show").click(function(){a()})});var formBuilder=function(a){return a.Form=Backbone.Collection.extend({model:a.BaseField,initialize:function(a,b){this.name=b.name||"My form",this.count=0,_.bindAll(this,"updateWithXml","clearAll","getSize","validateXML")},comparator:function(a){return a.get(a.id)},getSize:function(){return this.length},clearAll:function(){for(;this.models.length>0;){var a=this.at(this.models.length-1);a.trigger("destroy",a)}this.count=0},getXML:function(){var a=this.models.slice(1,this.models.length),b=$.parseXML('<?xml version="1.0" ?><form id="test attribute"   xmlns="http://www.w3schools.com" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.w3schools.com note.xsd"></form>'),c=$(b);return c.find("form").append("<name>"+this.name+"</name>"),c.find("form").append("<fields></fields>"),this.sort(),_.each(a,function(a){c.find("fields").append("<"+a.constructor.xmlTag+' id="'+a.get("id")+'" >'+a.getXML()+"</"+a.constructor.xmlTag+">")}),(new XMLSerializer).serializeToString(b)},validateXML:function(a){var b="";return $.ajax({url:"xml/NS_Schema.xsd",dataType:"html",async:!1}).done(_.bind(function(c){var d={xml:a,schema:c,arguments:["--noout","--schema","NS_Schema.xsd","output.xml"]},e=validateXML(d);if(e.indexOf("validates")>0)this.reset(),this.updateWithXml(a),b=!0;else{var f=e.split(":");b={error:f[3],element:f[2],message:f[f.length-1].split(".",1)[0]}}},this)).error(function(a,b,c){throw c.message}),b},updateWithXml:function(b){this.reset();var c=$.parseXML(b),d=$(c);this.name=d.find("form").find("name").first().text(),d.find("form").find("fields").children().each(_.bind(function(b,c){var d={id:$(c).prop("id"),name:{label:{value:$(c).find("name").find("label").text(),lang:$(c).find("name").find("label").prop("lang")},displayLabel:$(c).find("name").find("display_label").text()},label:$(c).find("label").first().text(),required:$(c).find("required").text()},e=null;switch($(c).prop("tagName")){case"field_hidden":e=new a.HiddenField({value:$(c).find("value").text()});break;case"field_text":e=new a.TextField({defaultValue:$(c).find("defaultValue").text(),size:$(c).find("size").text(),hint:$(c).find("hint").text()});break;case"field_date":e=new a.DateField({defaultValue:$(c).find("defaultValue").text(),size:$(c).find("size").text(),hint:$(c).find("hint").text(),format:$(c).find("format").text()});break;case"field_longText":e=new a.LongTextField({defaultValue:$(c).find("defaultValue").text(),size:$(c).find("size").text(),hint:$(c).find("hint").text(),resizable:$(c).find("resizable").text()});break;case"field_numeric":e=new a.NumericField({defaultValue:$(c).find("defaultValue").text(),size:$(c).find("size").text(),hint:$(c).find("hint").text(),min:$(c).find("min").text(),max:$(c).find("max").text(),step:$(c).find("step").text()});break;case"field_checkbox":var f=[];$(c).find("checkbox").each(function(a,b){f.push({label:$(b).find("label").text(),value:$(b).find("value").text()})}),e=new a.CheckBoxField({options:f,defaultValue:$(c).find("defaultValue").text()});break;case"field_select":var g=[];$(c).find("option").each(function(a,b){g.push({label:$(b).find("label").text(),value:$(b).find("value").text()})}),e=new a.OptionsField({options:g,defaultValue:$(c).find("defaultValue").text()});break;case"field_radio":var h=[];$(c).find("radio").each(function(a,b){h.push({label:$(b).find("label").text(),value:$(b).find("value").text()})}),e=new a.RadioField({options:h,defaultValue:$(c).find("defaultValue").text()})}null!==e&&(e.set(d),this.add(e),e.set("state","none"))},this))}}),a}(formBuilder),formBuilder=function(a){return a={init:function(){$("#formBuilder").html('<div class="row-fluid content"><div class="span3 widgetsPanel nano"></div><div class="span9 dropArea"></div><div class="settings span5"></div></div>'),this.form=new a.Form({},{name:"My form"}),this.panelView=new a.PanelView({el:$(".widgetsPanel"),collection:this.form}),this.panelView.render(),this.formView=new a.FormView({collection:this.form,el:$(".dropArea")}),this.formView.render(),this.settingsView=new a.SettingView({el:$(".settings")}),this.settingsView.render()},clear:function(){this.form.clearAll()}}}(formBuilder),formBuilder=function(formBuild){return formBuild.BaseField=Backbone.Model.extend({defaults:{id:0,label:"My label",name:{label:{value:"field",lang:"en"},displayLabel:"field"},required:!1,readOnly:!1,state:"new"},getXML:function(){return"<label>"+this.get("label")+"</label><name>   <label lang='"+this.get("name").label.lang+"'>"+this.get("name").label.value+"</label>   <display_label>"+this.get("name").displayLabel+"</display_label></name><required>"+this.get("required")+"</required><readOnly>"+this.get("readOnly")+"</readOnly>"},getSchemaProperty:function(index,property){if(index.indexOf("/")>0){var split=index.split("/"),str="this.constructor.schema";for(var each in split)str+=parseInt(each)===split.length-1?'["'+split[each]+'"]':'["'+split[each]+'"]["elements"]';return eval(str+'["'+property+'"]')}return this.constructor.schema[index][property]},changePropertyValue:function(index,value){if(index.indexOf("/")>0){for(var split=index.split("/"),str='this.get("'+split[0]+'")',i=1;i<split.length;i++)str+='["'+split[i]+'"]';eval(str+' = "'+value+'"')}else this.set(index,value)}},{schema:{id:{type:"integer",section:"advanced"},label:{type:"string",section:"simple"},name:{type:"object",elements:{label:{type:"object",elements:{value:{type:"string"},lang:{type:"string"}}},displayLabel:{type:"string"}}},required:{type:"boolean",section:"advanced"},readOnly:{type:"boolean"}}}),formBuild.HorizontalLine=Backbone.Model.extend({},{type:"hr",xmlTag:"field_horizontalLine"}),formBuild.HiddenField=Backbone.Model.extend({defaults:{id:0,name:{label:{value:"",lang:"en"},displayLabel:""},value:""},getXML:function(){return"<name>   <label lang='"+this.get("name").label.lang+"'>"+this.get("name").label.value+"</label>   <display_label>"+this.get("name").displayLabel+"</display_label></name><value>"+this.get("value")+"</value>"}},{type:"Hidden",xmlTag:"field_hidden",schema:{id:{type:"integer"},name:{label:{value:{type:"string"},lang:{type:"string"}},displayLebel:{type:"string"}},value:{type:"string"}}}),formBuild.TextField=formBuild.BaseField.extend({defaults:{defaultValue:"",hint:"Write some text",size:255},getXML:function(){var a=formBuild.BaseField.prototype.getXML.apply(this,arguments);return a+"<defaultValue>"+this.get("defaultValue")+"</defaultValue><hint>"+this.get("hint")+"</hint><size>"+this.get("size")+"</size>"},initialize:function(){formBuild.BaseField.prototype.initialize.apply(this,arguments),_.extend(this.constructor.schema,formBuild.BaseField.schema)}},{type:"Text",xmlTag:"field_text",schema:{defaultValue:{type:"string"},hint:{type:"string"},size:{type:"integer"}}}),formBuild.FileField=formBuild.BaseField.extend({defaults:{defaultValue:"",file:"",mimeType:"*",size:200},initialize:function(){formBuild.BaseField.prototype.initialize.apply(this,arguments),_.extend(this.constructor.schema,formBuild.BaseField.schema)},getXML:function(){var a=formBuild.BaseField.prototype.getXML.apply(this,arguments);return a+"<file>"+this.get("file")+"</file><defaultValue>"+this.get("defaultValue")+"</defaultValue><mimeType>"+this.get("mimeType")+"</mimeType><size>"+this.get("size")+"</size>"}},{type:"File",xmlTag:"field_file",schema:{defaultValue:{type:"string"},file:{type:"string"},mimeType:{type:"string"},size:{type:"integer"}}}),formBuild.TreeViewField=formBuild.BaseField.extend({defaults:{nodes:[{title:"Node 1",key:"1"},{title:"Folder 2",key:"2",folder:!0,children:[{title:"Node 2.1",key:"3"},{title:"Node 2.2",key:"4"}]}],defaultNode:0,multipleSelection:!0,hierarchicSelection:!1},initialize:function(){formBuild.BaseField.prototype.initialize.apply(this,arguments),_.extend(this.constructor.schema,formBuild.BaseField.schema),_.bindAll(this,"getNodeXml","getXML")},getNodeXml:function(a){var b="<node>   <title>"+a.title+"</title>   <key>"+a.key+"</key>   <isParent>"+(void 0===a.folder?"false":a.folder)+"</isParent>";return a.folder===!0&&_.each(a.children,_.bind(function(a){b+=this.getNodeXml(a)},this)),b+"</node>"},getXML:function(){var a=formBuild.BaseField.prototype.getXML.apply(this,arguments);return a+="<defaultNode>"+this.get("defaultNode")+"</defaultNode><multipleSelection>"+this.get("multipleSelection")+"</multipleSelection><hierarchicSelection>"+this.get("hierarchicSelection")+"</hierarchicSelection>",_.each(this.get("nodes"),_.bind(function(b){a+=this.getNodeXml(b)},this)),a}},{type:"TreeView",xmlTag:"field_tree",schema:{defaultNode:{type:"integer"},multipleSelection:{type:"boolean"},hierarchicSelection:{type:"boolean"},nodes:{title:{type:"string"},key:{type:"integer"},folder:{type:"boolean"},children:{type:[{type:"node"}]}}}}),formBuild.EnumerationField=formBuild.BaseField.extend({defaults:{options:[{label:"My first option",value:0},{label:"My second option",value:1}],defaultValue:0},initialize:function(){formBuild.BaseField.prototype.initialize.apply(this,arguments),_.extend(this.constructor.schema,formBuild.BaseField.schema)},addOption:function(a,b){this.get("options").push(a),b===!0&&this.set("defaultValue",a.value),this.trigger("change")},removeOption:function(a){this.get("options").splice(a,1),this.trigger("change")},saveOption:function(a,b,c){this.get("options")[a]=b,c===!0&&this.set("defaultValue",b.value),this.trigger("change")},getOption:function(a){return this.get("options")[a]},getXML:function(){var a=formBuild.BaseField.prototype.getXML.apply(this,arguments)+"<defaultValue>"+this.get("defaultValue")+"</defaultValue>";return _.each(this.get("options"),function(b){a+="<option>   <label>"+b.label+"</label>   <value>"+b.value+"</value></option>"}),a}},{type:"options",xmlTag:"field_enum",schema:{defaultValue:{type:"integer"},options:{type:"array",values:{label:{type:"string"},value:{type:"string"}}}}}),_.defaults(formBuild.TextField.prototype.defaults,formBuild.BaseField.prototype.defaults),_.defaults(formBuild.FileField.prototype.defaults,formBuild.BaseField.prototype.defaults),_.defaults(formBuild.TreeViewField.prototype.defaults,formBuild.BaseField.prototype.defaults),_.defaults(formBuild.EnumerationField.prototype.defaults,formBuild.BaseField.prototype.defaults),formBuild.PatternField=formBuild.TextField.extend({defaults:{pattern:""},initialize:function(){formBuild.TextField.prototype.initialize.apply(this,arguments),_.extend(this.constructor.schema,formBuild.TextField.schema)},getXML:function(){return formBuild.TextField.prototype.getXML.apply(this,arguments)+"<pattern>"+this.get("pattern")+"</pattern>"}},{type:"Pattern",xmlTag:"field_pattern",schema:{pattern:{type:"string"}}}),formBuild.DateField=formBuild.TextField.extend({defaults:{format:"dd/mm/yyyy"},initialize:function(){formBuild.TextField.prototype.initialize.apply(this,arguments),_.extend(this.constructor.schema,formBuild.TextField.schema)},getXML:function(){return formBuild.TextField.prototype.getXML.apply(this,arguments)+"<format>"+this.get("format")+"</format>"}},{type:"Date",xmlTag:"field_date",schema:{format:{type:"string"}}}),formBuild.NumericField=formBuild.TextField.extend({defaults:{minValue:0,maxValue:100,step:1},initialize:function(){formBuild.TextField.prototype.initialize.apply(this,arguments),_.extend(this.constructor.schema,formBuild.TextField.schema)},getXML:function(){return formBuild.TextField.prototype.getXML.apply(this,arguments)+"<min>"+this.get("minValue")+"</min><max>"+this.get("maxValue")+"</max><step>"+this.get("step")+"</step>"}},{type:"Numeric",xmlTag:"field_numeric",schema:{minValue:{type:"integer"},maxValue:{type:"integer"},step:{type:"integer"}}}),formBuild.LongTextField=formBuild.TextField.extend({defaults:{resizable:!1},initialize:function(){formBuild.TextField.prototype.initialize.apply(this,arguments),_.extend(this.constructor.schema,formBuild.TextField.schema)},getXML:function(){return formBuild.TextField.prototype.getXML.apply(this,arguments)+"<resizable>"+this.get("resizable")+"</resizable>"}},{type:"LongText",xmlTag:"field_longText",schema:{resizable:{type:"boolean"}}}),_.defaults(formBuild.NumericField.prototype.defaults,formBuild.TextField.prototype.defaults),_.defaults(formBuild.PatternField.prototype.defaults,formBuild.TextField.prototype.defaults),_.defaults(formBuild.DateField.prototype.defaults,formBuild.TextField.prototype.defaults),_.defaults(formBuild.LongTextField.prototype.defaults,formBuild.TextField.prototype.defaults),formBuild.CheckBoxField=formBuild.EnumerationField.extend({getXML:function(){return formBuild.EnumerationField.prototype.getXML.apply(this,arguments)},initialize:function(){formBuild.EnumerationField.prototype.initialize.apply(this,arguments),_.extend(this.constructor.schema,formBuild.EnumerationField.schema)}},{type:"CheckBox",xmlTag:"field_checkbox"}),formBuild.RadioField=formBuild.EnumerationField.extend({getXML:function(){return formBuild.EnumerationField.prototype.getXML.apply(this,arguments)},initialize:function(){formBuild.EnumerationField.prototype.initialize.apply(this,arguments),_.extend(this.constructor.schema,formBuild.EnumerationField.schema)}},{type:"Radio",xmlTag:"field_radio"}),formBuild.SelectField=formBuild.EnumerationField.extend({getXML:function(){return formBuild.EnumerationField.prototype.getXML.apply(this,arguments)},initialize:function(){formBuild.EnumerationField.prototype.initialize.apply(this,arguments),_.extend(this.constructor.schema,formBuild.EnumerationField.schema)}},{type:"Select",xmlTag:"field_select"}),_.defaults(formBuild.RadioField.prototype.defaults,formBuild.EnumerationField.prototype.defaults),_.defaults(formBuild.CheckBoxField.prototype.defaults,formBuild.EnumerationField.prototype.defaults),_.defaults(formBuild.SelectField.prototype.defaults,formBuild.EnumerationField.prototype.defaults),formBuild}(formBuilder);$(document).ready(function(){xmlComparator=function(){this.compare=function(a,b,c){{var d=$(a);$(b)}$(b).find(c).children().each(function(a,b){console.log($(d,b).size())})}}});var formBuilder=function(a){return a.BaseView=Backbone.View.extend({events:{"click  .fa-trash-o":"removeView","click .fa-wrench":"setting","focus input":"updateSetting"},initialize:function(){this.template=_.template(this.constructor.templateSrc),_.bindAll(this,"render","removeView","setting","updateSetting","getHtml","deleteView"),this.model.bind("change",this.render),this.model.bind("destroy",this.deleteView)},updateIndex:function(a){this.model.id=parseInt(a)},render:function(){var a=this.template(this.model.toJSON());return $(this.el).html(a),this},getHtml:function(){return this.html(this.model.toJSON())},deleteView:function(){$(this.el).remove(),this.remove()},removeView:function(){this.model.set("state","delete"),$(this.el).remove(),this.remove()},updateSetting:function(){$(".dropArea").hasClass("span9")||(a.set=new a.SettingView({model:this.model,el:$(".settings")}).render())},setting:function(){$(".dropArea").hasClass("span9")&&a.settingsView.changeModel(this.model)}}),a.TextFieldView=a.BaseView.extend({events:function(){return _.extend({},a.BaseView.prototype.events,{'change input[type="text"]':"updateModel"})},render:function(){a.BaseView.prototype.render.apply(this,arguments),$(this.el).find('input[type="text"]').enableSelection()},updateModel:function(a){this.model.set("value",$(a.target).val())}},{templateSrc:'<label class="span3 <% if (required === true) { %> required <% } %>"><%= label %></label> <input type="text" class="span8" name="<%= name %>" readonly="<%= readOnly %>"  id="<%= id%>" placeholder="<%= hint %>" value="<%= defaultValue %>" /> <div class="span1">    <i class="fa fa-trash-o"></i><i class="fa fa-wrench"></i> </div>'}),a.PatternFieldView=a.BaseView.extend({events:function(){return _.extend({},a.BaseView.prototype.events,{'change input[type="text"]':"updateModel"})},initialize:function(){a.BaseView.prototype.initialize.apply(this,arguments)},render:function(){a.BaseView.prototype.render.apply(this,arguments),$(this.el).find('input[type="text"]').enableSelection()},updateModel:function(a){this.model.set("value",$(a.target).val())}},{templateSrc:'<label class="span3 <% if (required === true) { %> required <% } %>"><%= label %></label> <input type="text" class="span8" name="<%= name["displayLabel"] %>" readonly="<%= readOnly %>"  id="<%= id%>" placeholder="<%= hint %>" value="<%= defaultValue %>" pattern="<%= pattern %>" /> <div class="span1">    <i class="fa fa-trash-o"></i><i class="fa fa-wrench"></i> </div>'}),a.FileFieldView=a.BaseView.extend({events:function(){return _.extend({},a.BaseView.prototype.events,{'change input[type="text"]':"updateModel"})},initialize:function(){a.BaseView.prototype.initialize.apply(this,arguments)},render:function(){a.BaseView.prototype.render.apply(this,arguments),$(this.el).find('input[type="text"]').enableSelection()},updateModel:function(a){this.model.set("value",$(a.target).val())}},{templateSrc:'<label class="span3 <% if (required === true) { %> required <% } %>"><%= label %></label> <input type="file" class="span8" name="<%= name["displayLabel"] %>"  id="<%= id%>" value="<%= defaultValue %>" /> <div class="span1">    <i class="fa fa-trash-o"></i><i class="fa fa-wrench"></i> </div>'}),a.NumericFieldView=a.BaseView.extend({events:function(){return _.extend({},a.BaseView.prototype.events,{})},render:function(){a.BaseView.prototype.render.apply(this,arguments),$(this.el).find("input").spinner({step:this.model.step,min:this.model.minValue}).parent("span").addClass("span8")}},{templateSrc:'<label class="span3 <% if (required) { %> required <% } %>"><%= label %></label> <input class="span12 spin" name="<%= name %>" step="<%= step %>" id="<%= id%>" placeholder="<%= hint %>" min="<%= minValue %>" max="<%= maxValue %>" value="<% defaultValue || 0 %>" /> <div class="span1">    <i class="fa fa-trash-o"></i><i class="fa fa-wrench"></i> </div>'}),a.RadioFieldView=a.BaseView.extend({events:function(){return _.extend({},a.BaseView.prototype.events,{'click input[type="radio"]':"updateSetting"})}},{templateSrc:'<label class="span3 <% if (required) { %> required <% } %>"><%= label %></label><div class="span8" style="border : 2px #eee solid;" id="<%= id %>"><% _.each(options, function(el, index) { %><label class="span12 noMarginLeft left"> <input type="radio" style="margin-left: 10px;" name="<%= name %>" value="<%= el.value%>" <% if (defaultValue == index) {%> checked <% } %> /> <%= el.label %></label> <% }); %></div><div class="span1 .pull-right"> <i class="fa fa-trash-o"></i><i class="fa fa-wrench"></i> </div>'}),a.SelectFieldView=a.BaseView.extend({events:function(){return _.extend({},a.BaseView.prototype.events,{"change select":"updateSelected"})},updateSelected:function(a){this.model.updateSelectedOption($(a.target).find(":selected").data("idx"),!0)}},{templateSrc:'<label class="span3 <% if (required) { %> required <% } %>"><%= label %></label> <select name="<% name %>" class="span8"> <% _.each(options, function(el, idx) { %><option data-idx=<%= idx %> value="<%= el.value %>" <% if (defaultValue == idx) {%> selected <% } %> ><%= el.label %></option><% }) %></select> <div class="span1 .pull-right"> <i class="fa fa-trash-o"></i><i class="fa fa-wrench"></i> </div> '}),a.CheckBoxFieldView=a.BaseView.extend({events:function(){return _.extend({},a.BaseView.prototype.events,{'change input[type="checkbox"]':"updateSelected"})},updateSelected:function(a){this.model.updateSelectedOption($(a.target).data("idx"),$(a.target).is(":checked"))}},{templateSrc:'<label class="span3 <% if (required) { %> required <% } %>"><%= label %></label><div class="span8" style="border : 2px #eee solid;"><% _.each(options, function(el, idx) { %><label class="span12 noMarginLeft left"> <input data-idx=<%= idx %> type="checkbox" style="margin-left: 10px;" name="<%= name %>" id="<%= id %>" value="<%= el.value%>" <% if (defaultValue == idx) {%> checked <% } %> /> <%= el.label %></label> <% }); %></div><div class="span1 .pull-right"> <i class="fa fa-trash-o"></i><i class="fa fa-wrench"></i> </div>'}),a.LongTextFieldView=a.BaseView.extend({events:function(){return _.extend({},a.BaseView.prototype.events,{"focus textarea":"updateSetting"})},initialize:function(){a.BaseView.prototype.initialize.apply(this,arguments),$(this.el).addClass("textArea")}},{templateSrc:'<label class="span3 <% if (required) { %> required <% } %>" ><%= label %></label><textarea class="span8" style="<% if(!resizable){ %>resize: none<%}%>" class="span8"  name="<%= name %>" id="<%= id%>" placeholder="<%= hint %>"><%= defaultValue %></textarea><div class="span1"> <i class="fa fa-trash-o"></i><i class="fa fa-wrench"></i> </div> '}),a.TreeViewFieldView=a.BaseView.extend({events:function(){return _.extend({},a.BaseView.prototype.events,{})},render:function(){a.BaseView.prototype.render.apply(this,arguments);{var b=this.model.get("nodes");this.el}$(this.el).find("#tree").fancytree({source:b,checkbox:!0,selectMode:2})}},{templateSrc:'<label class="span3 <% if (required) { %> required <% } %>" ><%= label %></label><div class="span8" id="tree"></div><div class="span1"> <i class="fa fa-trash-o"></i><i class="fa fa-wrench"></i> </div> '}),a.DateFieldView=a.BaseView.extend({events:function(){return _.extend({},a.BaseView.prototype.events,{})},render:function(){a.BaseView.prototype.render.apply(this,arguments),$(this.el).find("input").datepicker({format:this.model.get("format")})}},{templateSrc:'<label class="span3 <% if (required) { %> required <% } %>"><%= label %></label> <input type="text" class="span8" name="<%= name %>" id="<%= id%>" placeholder="<%= hint %>" value="<%= defaultValue %>" /> <div class="span1">    <i class="fa fa-trash-o"></i><i class="fa fa-wrench"></i> </div>'}),a.FormView=Backbone.View.extend({events:{"change #protocolName":"changeFormName"},initialize:function(){this.template=_.template(this.constructor.templateSrc),_.bindAll(this,"render","addElement","changeFormName","importXML","downloadXML","updateView","showVersionning"),this.collection.bind("add",this.addElement),this.collection.bind("change",this.updateView),this._view=[]},updateView:function(){$(this.el).find("#protocolName").val(this.collection.name)},showVersionning:function(){for(var a in this._view)"delete"===this._view[a].model.get("state")||$(this._view[a].$el).addClass(this._view[a].model.get("state"))},addElement:function(b){var c="dropField"+this.collection.length;if($(".drop").append('<div class="span12 dropField " id="'+c+'" ></div>'),void 0!==a[b.constructor.type+"FieldView"]){var d=new a[b.constructor.type+"FieldView"]({el:$("#"+c),model:b});null!==d&&(d.render(),this._view[c]=d)}else this.displayError("Error","Can't create view for this field")},render:function(){var a=this.template(this.collection.toJSON());$(this.el).html(a);var b=this._view;return $(".drop").sortable({cancel:null,cursor:"pointer",axis:"y",items:".dropField",connectWith:".sortable",handle:'label, input[type="text"]',containement:".dropArea",stop:function(){for(var a in b)b[a].updateIndex($("#"+a).index())}}).disableSelection(),this},changeFormName:function(){this.collection.name=$("#protocolName").val()},downloadXML:function(){var a='<div id="popup">'+this.constructor.popupDwSrc+"</div>",b=this;$(a).dialog({modal:!0,width:700,resizable:!1,draggable:!1,position:"center",create:function(){var a=$(this);$(this).find("button").bind("click",function(){if(""!==$(a).find('input[type="text"]').val())try{var c=(!!new Blob,new Blob([b.collection.getXML()],{type:"application/xml;charset=utf-8"}));saveAs(c,$(a).find('input[type="text"]').val()+".xml"),$(a).dialog("close")}catch(d){b.displayError("Error","Can't create file")}else b.displayError("Error","You need to enter a name for your file")})}})},importXML:function(){var a='<div id="popup">'+this.constructor.popupSrc+"</div>",b=this;$(a).dialog({modal:!0,width:700,resizable:!1,draggable:!1,position:"center",create:function(){var a=$(this);$(this).find('input[type="file"]').bind("change",function(){var b=$(this).val().split("\\");$(a).find("#fileToImport").val(b[b.length-1])}),$(this).find("#findButton").bind("click",function(){$(a).find("#fileToImportHide").trigger("click")}),$(this).find("#fileToImport").bind("click",function(){$(a).find("#fileToImportHide").trigger("click")}),$(this).find("#importButton").bind("click",function(){$(a).dialog("close");var c=$(a).find("#fileToImportHide")[0].files[0];if(c)if("text/xml"===c.type){var d=new FileReader;d.readAsText(c,"UTF-8"),d.onload=function(a){try{var c=b.collection.validateXML(a.target.result);if(c!==!0){var d="There is a error on the "+c.element+"<br />";d+=c.message+"<br />Please check your XML file",b.displayError(c.error,d)}}catch(e){var d="Your XML File can't be validated.<br />The specific error is : "+e;b.displayError("Error during XML validation",d)}},d.onerror=function(){b.displayError("An error was occured","An error was occure during reading file")}}else b.displayError("File type error","Your have to give an XML file.");else b.displayError("An error was occured","An error was occure during reading file")})}})},displayError:function(a,b){var c=$('<div id="dialog-message" title="'+a+'"><p><span class="ui-icon ui-icon-alert" style="float:left; margin:0 7px 50px 0;"></span>'+b+"</p></div>");$(c).dialog({modal:!0,width:500,height:250,position:"center",draggable:!1,buttons:{Ok:function(){$(this).dialog("close")}}})}},{templateSrc:'<div class="row-fluid"><input type="text" id="protocolName" name="protocolName" value="<%= this.collection.name %>" /><hr class="mainHr"/><br /></div><div class="row-fluid"><div class="span10 offset1 drop"></div></div>',popupSrc:'<div id="popup" class="row-fluid"><h2 class="offset1">Your XML will be validate after import</h2><br /><div class="row-fluid"><input type="file" id="fileToImportHide"  class="hide" /><label class="span2 offset1">XML file</label><input type="text" class="span5" id="fileToImport" placeholder="Your XML File" /><button type="button" class="span3" id="findButton" style="margin-left: 10px;">Find</button></div><div class="row-fluid"><br /><button class="span4 offset3" id="importButton">Import</button></div></div>',popupDwSrc:'<div id="popupDownload" class="row-fluid"><div class="row-fluid"><h2 class="offset1 span10 center">Now you can download your XML File</h2></div><br /><div class="row-fluid"><label class="span4 offset1 right" style="line-height: 30px;">XML file name</label><input type="text" class="span5" id="fileName" placeholder="Your XML filename" /></div><br /><div class="row-fluid"><button type="button" class="span10 offset1" id="downloadButton">Dowload</button></div><br /></div>'}),a.SettingView=Backbone.View.extend({events:{"click .close":"hidePannel","change .property":"updateModel","click .addOption":"addOption","click h2 > a":"displayOptions","click #accordion h1":"accordion","click .edit":"editOption","click .remove":"removeOption"},initialize:function(){this.template=_.template(this.constructor.templateSrc),_.bindAll(this,"render","hidePannel","removePanel","changeModel","addOption","getSubTemplateForArray","getSubTemplateForObject"),this.model=null,this._op=!0},displayOptions:function(a){$(a.target).hasClass("selected")||($(".settings h2 > a").toggleClass("selected"),"simple"===$(a.target).prop("id")?$(".advanced").addClass("hide",500):$(".advanced").removeClass("hide",500))},changeModel:function(a){null===!this.model&&(this.model.off(null,null,this),this.model=null),this.model=a,this.model.bind("change",this.render),this.model.bind("destroy",this.removePanel),$(".dropArea").switchClass("span9","span7",100),$(".widgetsPanel").toggle(100),this.render()},removePanel:function(){this.hidePannel()},render:function(){if(null!==this.model){var a=this.template(this.model.toJSON());return $(this.el).html(a),this._op?$("#optionsPanel").addClass("toggle"):$("#settingsPanel").addClass("toggle"),this}},hidePannel:function(){$(".dropArea").hasClass("span7")&&($(".dropArea").switchClass("span7","span9",100),$(".widgetsPanel").toggle(100),this._op=!0)},updateModel:function(a){"checkbox"===$(a.target).prop("type")?this.model.changePropertyValue($(a.target).data("attr"),$(a.target).is(":checked")):this.model.changePropertyValue($(a.target).data("attr"),$(a.target).val()),this.model.set("state","change")},accordion:function(a){$(a.target).next("div").siblings("div").slideUp(),$(a.target).next("div").slideToggle()},removeOption:function(a){confirm("Are you sur ?")&&(this._op=!1,this.model.removeOption($(a.target).parents("tr").prop("id")))},addOption:function(){var a='<div id="myModal" class="modal span8 offset2 fade" tabindex="-1" role="dialog" aria-labelledby="myModalLabel" aria-hidden="true">   <div class="modal-header">       <button type="button" class="close" data-dismiss="modal" aria-hidden="true">×</button>       <h3 id="myModalLabel">Add an option</h3>   </div>   <div class="modal-body">';_.each(this.model.constructor.schema.options.values,function(b,c){a+='<div class="row-fluid">   <input type="text" class="span8 offset2 object" data-index="'+c+'" placeholder="'+c+'" /></div><br />'}),a+='       <div class="row-fluid"><label class="span3 offset2">Is the default value ? </label><input type="checkbox" /></div>   </div>   <div class="modal-footer">       <button class="btn" data-dismiss="modal" aria-hidden="true">Close</button>       <button class="btn btn-primary saveChange">Save changes</button>   </div></div>';var b=$(a);$(b).modal(),$(b).find(".saveChange").bind("click",_.bind(function(){var a={};$(b).find(".object").each(function(b,c){a[$(c).data("index")]=$(c).val()}),this.model.addOption(a,$(b).find('input[type="checkbox"]').is(":checked"))},this))},editOption:function(a){var b=$(a.target).closest("tr"),c="Yes"===$(b).find('[data-index="default"]').text()?!0:!1,d=$(b).prop("id"),e={};$(b).find(".object").each(function(a,b){e[$(b).data("index")]=$(b).text()});var f='<div id="myModal" class="modal span8 offset2 fade" tabindex="-1" role="dialog" aria-labelledby="myModalLabel" aria-hidden="true">   <div class="modal-header">       <button type="button" class="close" data-dismiss="modal" aria-hidden="true">×</button>       <h3 id="myModalLabel">Add an option</h3>   </div>   <div class="modal-body">';_.each(this.model.constructor.schema.options.values,function(a,b){f+='<div class="row-fluid">   <input type="text" class="span8 offset2 object" data-index="'+b+'" placeholder="'+b+'" value="'+e[b]+'" /></div><br />'}),f+='       <div class="row-fluid"><label class="span3 offset2">Is the default value ? </label><input type="checkbox"'+(c?"checked":"")+'/></div>   </div>   <div class="modal-footer">       <button class="btn" data-dismiss="modal" aria-hidden="true">Close</button>       <button class="btn btn-primary saveChange">Save changes</button>   </div></div>';var g=$(f);$(g).modal(),$(g).find(".saveChange").bind("click",_.bind(function(){e={},$(g).find(".object").each(function(a,b){e[$(b).data("index")]=$(b).val()
}),this.model.saveOption(d,e,$(g).find('input[type="checkbox"]').is(":checked")),$(g).modal("hide")},this))},getSubTemplateHTML:function(a,b,c,d){switch(c){case"integer":var e="advanced"===d?'<div class="advanced hide">':"<div>";return e+'<div class="row-fluid">   <label class="span10 offset1">'+b+'</label></div><div class="row-fluid">   <input class="span10 offset1 property" type="number" data-attr="'+b+'" placeholder="'+b+'" value="'+a+'" /></div></div>';case"string":default:var e="advanced"===d?'<div class="advanced hide">':"<div>";return e+'<div class="row-fluid">   <label class="span10 offset1">'+b+'</label></div><div class="row-fluid">   <input class="span10 offset1 property" type="text" data-attr="'+b+'" placeholder="'+b+'" value="'+a+'" /></div></div>';case"boolean":if("advanced"===d)var e='<div class="row-fluid advanced hide">&nbsp;</div><div class="row-fluid advanced hide">';else var e='<div class="row-fluid">&nbsp;</div><div class="row-fluid">';return e+='   <label class="span4 offset1">'+b+' : </label>   <input class="span2 property" data-attr="'+b+'" type="checkbox" '+(a===!0?"checked":" ")+" /></div>"}},getSubTemplateForObject:function(a,b){var c="",d="",e="";return _.each(a,_.bind(function(a,f){d=this.model.getSchemaProperty(b+"/"+f,"type"),e=this.model.getSchemaProperty(b+"/"+f,"section"),c+="object"===d?this.getSubTemplateForObject(a,b+"/"+f):this.getSubTemplateHTML(a,b+"/"+f,d,e)},this)),c},getSubTemplateForArray:function(a,b){var c=0,d='<div class="row-fluid">   <label class="span10 offset1">'+b+'</label></div><table class="table table-stripped span10 offset1">   <thead>       <tr>';return _.each(this.model.constructor.schema[b].values,function(a,b){d+="        <th>"+b+"</th>"}),d+="       <th>Default value</th>       <th>Action</th>       </tr>   </thead>   <tbody>",_.each(a,_.bind(function(a){d+='       <tr id="'+c+'">',_.each(a,function(a,b){d+='        <td data-index="'+b+'" class="object">'+a+"</td>"}),d+='           <td data-index="default">'+(a.value===this.model.get("defaultValue")?"Yes":"No")+'</td>           <td><a href="#" class="edit">Edit</a> / <a href="#" class="remove">Remove</td>       </tr>',c++},this)),d+='       <tr>           <td colspan="'+(_.size(a)+2)+'" class="center">               <a href="#" class="addOption">Add an option</a>           </td>       </tr>   </tbody></table>'},getTemplate:function(a,b,c){var d=this.model.constructor.schema[b];if(void 0!==d){var e=this.model.constructor.schema[b];switch(c=void 0!==c?c:this.model.constructor.schema[b].type){case"integer":case"string":case"boolean":return this.getSubTemplateHTML(a,b,c,e);case"array":return this.getSubTemplateForArray(a,b);case"object":return this.getSubTemplateForObject(a,b);default:return"none"}}}},{templateSrc:'<div id="accordion">   <h1>Settings</h1>   <div>       <h2>           <a href="#" id="simple" class="selected">Simple options</a> / <a href="#" id="advanced">Advanced options</a>       </h2>       <% _.each(this.model.attributes, _.bind(function(el, idx) { %>            <%= this.getTemplate(el, idx) %>       <%}, this)); %>       <div class="row-fluid">&nbsp;</div>   </div>   <div class="row-fluid">&nbsp;</div>   <button class="close center" style="width: 100%">Save</button></div>'}),a.PanelView=Backbone.View.extend({events:{"dblclick .fields":"appendToDrop"},initialize:function(a){this._collection=a,_.bindAll(this,"appendToDrop")},appendToDrop:function(b){if($(b.target).disableSelection(),void 0!==a[$(b.target).data("type")+"Field"]){var c=new(a[$(b.target).data("type")+"Field"])({id:this.collection.getSize()});this.collection.add(c)}else alert("Can't create field object")},render:function(){return $(this.el).html(this.constructor.templateSrc),$(".fields").disableSelection(),$(this.el).nanoScroller(),this}},{templateSrc:'<div class="nano-content"><h1 class="center">Fields</h1><div class="row-fluid"><div class="span10 offset1 fields" data-type="Text">Text</div></div><div class="row-fluid"><div class="span10 offset1 fields" data-type="Pattern">Pattern</div></div><div class="row-fluid"><div class="span10 offset1 fields" data-type="File">File picker</div></div><div class="row-fluid"><div class="span10 offset1 fields" data-type="LongText">Long Text</div></div><div class="row-fluid"><div class="span10 offset1 fields" data-type="TreeView">Tree view</div></div><div class="row-fluid"><div class="span10 offset1 fields" data-type="Radio">Radio buttons</div><div class="row-fluid"><div class="span10 offset1 fields" data-type="CheckBox"><i class="fa fa-check-square-o"></i>&nbsp;Checkboxes</div></div><div class="row-fluid"><div class="span10 offset1 fields" data-type="Select">Options</div></div><div class="row-fluid"><div class="span10 offset1 fields" data-type="Numeric">Numéric</div></div><div class="row-fluid"><div class="span10 offset1 fields" data-type="Date">Date</div></div><div class="row-fluid"><div class="span10 offset1 fields" data-type="Hidden">Hidden</div></div><h1 class="center">Layouts</h1><div class="row-fluid"><div class="span10 offset1 fields" data-type="hr">Horizontal line</div></div><div class="row-fluid"><div class="span10 offset1 fields" data-type="fieldset">Fieldset</div></div></div>'}),a.HiddenFieldView=a.BaseView.extend({events:function(){return _.extend({},a.BaseView.prototype.events,{})}},{templateSrc:'<label class="span3 grey">My hidden field</label> <input type="text" disabled class="span8" name="<%= name %>" id="<%= id%>" value="<%= value %>" /> <div class="span1">    <i class="fa fa-trash-o"></i><i class="fa fa-wrench"></i> </div>'}),a.HorizontalLineView=a.BaseView.extend({render:function(){a.BaseView.prototype.render.apply(this,arguments),$(this.el).addClass("min")}},{templateSrc:'<hr class="span10 offset1" /><div class="span1">    <i class="fa fa-trash-o"></i> </div>'}),a}(formBuilder);